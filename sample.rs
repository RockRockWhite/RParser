use serde::{Deserialize, Serialize};
use std::{collections::HashMap, error::Error, hash::Hash};

// declarations
// ======================

pub struct Foo {
    x: i32,
    y: i32,
}

// ======================

/// Token
/// must implement Clone and Token trait
/// Token trait is used to convert a token to a tree node
pub trait Token: Clone {
    fn to_tree_node(&self) -> ParsingTreeNode;
}

pub struct ParsingTreeNode {
    pub symbol_type: String,
    pub data: String,
    pub children: Vec<ParsingTreeNode>,
}

impl ParsingTreeNode {
    pub fn build(symbol_type: String, data: String, children: Vec<ParsingTreeNode>) -> Self {
        ParsingTreeNode {
            symbol_type,
            data,
            children,
        }
    }
}

/// NodePair
/// a pair of a node and a state.
/// (TreeNode, state)
pub struct NodePair(ParsingTreeNode, usize);
impl NodePair {
    pub fn new(node: ParsingTreeNode, state: usize) -> Self {
        NodePair(node, state)
    }
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ReduceDerivation {
    pub left: String,
    pub right: Vec<String>,
}

impl PartialEq for ReduceDerivation {
    fn eq(&self, other: &Self) -> bool {
        self.left == other.left && self.right == other.right
    }
}

impl Eq for ReduceDerivation {}

impl Hash for ReduceDerivation {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.left.hash(state);
        self.right.hash(state);
    }
}

impl ReduceDerivation {
    pub fn build(left: String, right: Vec<String>) -> Self {
        ReduceDerivation { left, right }
    }
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Action {
    Shift(usize),
    Reduce(ReduceDerivation),
    Accept,
    Error,
}

#[derive(Serialize, Deserialize)]
pub struct State {
    pub actions: HashMap<String, Action>,
}

impl State {
    pub fn new() -> Self {
        State {
            actions: HashMap::new(),
        }
    }
}

#[derive(Serialize, Deserialize, Default)]
pub struct ActionTable {
    pub states: Vec<State>,
}

impl ActionTable {
    pub fn get_action(&self, state: usize, symbol: &str) -> Option<&Action> {
        self.states[state].actions.get(symbol)
    }
}

#[derive(Default)]
pub struct RParser {
    action_table: ActionTable,
    handlers: HashMap<ReduceDerivation, Box<dyn Fn(Vec<String>) -> String>>,
    // variables
    // ======================
    pub a: i32,
    pub b: i64,
    // ======================
}

impl RParser {
    pub const END_SYMBOL: &'static str = "__$__";
    pub const EPSILON_SYMBOL: &'static str = "__EPSILON__";
    pub const DUMMY_START_SYMBOL: &'static str = "__DUMMY_START__";

    pub fn new() -> Self {
        // action table generated by rparser
        // ======================
        let action_table: ActionTable =  serde_json::from_str(r#"{"states":[{"actions":{"program":{"Shift":1},"block":{"Shift":2},"S":{"Shift":3},"__$__":"Accept","left_curly_brace":{"Shift":4}}},{"actions":{"__$__":{"Reduce":{"left":"S","right":["program"]}}}},{"actions":{"__$__":{"Reduce":{"left":"program","right":["block"]}}}},{"actions":{"__$__":{"Reduce":{"left":"__DUMMY_START__","right":["S"]}}}},{"actions":{"while":{"Reduce":{"left":"decls","right":[]}},"decls":{"Shift":5},"basic":{"Reduce":{"left":"decls","right":[]}},"right_curly_brace":{"Reduce":{"left":"decls","right":[]}},"if":{"Reduce":{"left":"decls","right":[]}},"break":{"Reduce":{"left":"decls","right":[]}},"left_curly_brace":{"Reduce":{"left":"decls","right":[]}},"id":{"Reduce":{"left":"decls","right":[]}},"do":{"Reduce":{"left":"decls","right":[]}}}},{"actions":{"do":{"Reduce":{"left":"stmts","right":[]}},"basic":{"Shift":7},"type":{"Shift":8},"break":{"Reduce":{"left":"stmts","right":[]}},"id":{"Reduce":{"left":"stmts","right":[]}},"while":{"Reduce":{"left":"stmts","right":[]}},"right_curly_brace":{"Reduce":{"left":"stmts","right":[]}},"left_curly_brace":{"Reduce":{"left":"stmts","right":[]}},"stmts":{"Shift":14},"decl":{"Shift":6},"if":{"Reduce":{"left":"stmts","right":[]}}}},{"actions":{"left_curly_brace":{"Reduce":{"left":"decls","right":["decls","decl"]}},"right_curly_brace":{"Reduce":{"left":"decls","right":["decls","decl"]}},"break":{"Reduce":{"left":"decls","right":["decls","decl"]}},"id":{"Reduce":{"left":"decls","right":["decls","decl"]}},"while":{"Reduce":{"left":"decls","right":["decls","decl"]}},"if":{"Reduce":{"left":"decls","right":["decls","decl"]}},"do":{"Reduce":{"left":"decls","right":["decls","decl"]}},"basic":{"Reduce":{"left":"decls","right":["decls","decl"]}}}},{"actions":{"id":{"Reduce":{"left":"type","right":["basic"]}},"[":{"Reduce":{"left":"type","right":["basic"]}}}},{"actions":{"id":{"Shift":9},"[":{"Shift":11}}},{"actions":{";":{"Shift":10}}},{"actions":{"while":{"Reduce":{"left":"decl","right":["type","id",";"]}},"do":{"Reduce":{"left":"decl","right":["type","id",";"]}},"break":{"Reduce":{"left":"decl","right":["type","id",";"]}},"left_curly_brace":{"Reduce":{"left":"decl","right":["type","id",";"]}},"right_curly_brace":{"Reduce":{"left":"decl","right":["type","id",";"]}},"id":{"Reduce":{"left":"decl","right":["type","id",";"]}},"if":{"Reduce":{"left":"decl","right":["type","id",";"]}},"basic":{"Reduce":{"left":"decl","right":["type","id",";"]}}}},{"actions":{"num":{"Shift":12}}},{"actions":{"]":{"Shift":13}}},{"actions":{"id":{"Reduce":{"left":"type","right":["type","[","num","]"]}},"[":{"Reduce":{"left":"type","right":["type","[","num","]"]}}}},{"actions":{"break":{"Shift":15},"while":{"Shift":79},"right_curly_brace":{"Shift":89},"left_curly_brace":{"Shift":4},"if":{"Shift":17},"loc":{"Shift":84},"do":{"Shift":72},"id":{"Shift":31},"block":{"Shift":68},"stmt":{"Shift":88}}},{"actions":{";":{"Shift":16}}},{"actions":{"else":{"Reduce":{"left":"stmt","right":["break",";"]}},"while":{"Reduce":{"left":"stmt","right":["break",";"]}},"id":{"Reduce":{"left":"stmt","right":["break",";"]}},"right_curly_brace":{"Reduce":{"left":"stmt","right":["break",";"]}},"if":{"Reduce":{"left":"stmt","right":["break",";"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["break",";"]}},"break":{"Reduce":{"left":"stmt","right":["break",";"]}},"do":{"Reduce":{"left":"stmt","right":["break",";"]}}}},{"actions":{"(":{"Shift":18}}},{"actions":{"num":{"Shift":28},"term":{"Shift":47},"factor":{"Shift":36},"unary":{"Shift":42},"real":{"Shift":27},"bool":{"Shift":19},"id":{"Shift":31},"-":{"Shift":21},"!":{"Shift":29},"loc":{"Shift":32},"join":{"Shift":56},"equality":{"Shift":64},"(":{"Shift":23},"true":{"Shift":22},"expr":{"Shift":24},"false":{"Shift":26},"rel":{"Shift":63}}},{"actions":{"||":{"Shift":20},")":{"Shift":67}}},{"actions":{"id":{"Shift":31},"unary":{"Shift":42},"loc":{"Shift":32},"factor":{"Shift":36},"false":{"Shift":26},"real":{"Shift":27},"num":{"Shift":28},"!":{"Shift":29},"-":{"Shift":21},"expr":{"Shift":24},"true":{"Shift":22},"equality":{"Shift":64},"rel":{"Shift":63},"term":{"Shift":47},"join":{"Shift":66},"(":{"Shift":23}}},{"actions":{"!":{"Shift":29},"num":{"Shift":28},"unary":{"Shift":65},"factor":{"Shift":36},"(":{"Shift":23},"false":{"Shift":26},"true":{"Shift":22},"loc":{"Shift":32},"-":{"Shift":21},"real":{"Shift":27},"id":{"Shift":31}}},{"actions":{">":{"Reduce":{"left":"factor","right":["true"]}},";":{"Reduce":{"left":"factor","right":["true"]}},"/":{"Reduce":{"left":"factor","right":["true"]}},"<":{"Reduce":{"left":"factor","right":["true"]}},"-":{"Reduce":{"left":"factor","right":["true"]}},"<=":{"Reduce":{"left":"factor","right":["true"]}},")":{"Reduce":{"left":"factor","right":["true"]}},"&&":{"Reduce":{"left":"factor","right":["true"]}},"+":{"Reduce":{"left":"factor","right":["true"]}},"*":{"Reduce":{"left":"factor","right":["true"]}},">=":{"Reduce":{"left":"factor","right":["true"]}},"||":{"Reduce":{"left":"factor","right":["true"]}},"==":{"Reduce":{"left":"factor","right":["true"]}},"!=":{"Reduce":{"left":"factor","right":["true"]}}}},{"actions":{"bool":{"Shift":54},"term":{"Shift":47},"loc":{"Shift":32},"unary":{"Shift":42},"join":{"Shift":56},"id":{"Shift":31},"factor":{"Shift":36},"false":{"Shift":26},"rel":{"Shift":63},"-":{"Shift":21},"!":{"Shift":29},"real":{"Shift":27},"(":{"Shift":23},"num":{"Shift":28},"true":{"Shift":22},"equality":{"Shift":64},"expr":{"Shift":24}}},{"actions":{";":{"Reduce":{"left":"rel","right":["expr"]}},">":{"Shift":48},">=":{"Shift":52},"-":{"Shift":25},"+":{"Shift":45},"==":{"Reduce":{"left":"rel","right":["expr"]}},"!=":{"Reduce":{"left":"rel","right":["expr"]}},"<":{"Shift":43},"&&":{"Reduce":{"left":"rel","right":["expr"]}},"<=":{"Shift":50},"||":{"Reduce":{"left":"rel","right":["expr"]}},")":{"Reduce":{"left":"rel","right":["expr"]}}}},{"actions":{"-":{"Shift":21},"id":{"Shift":31},"real":{"Shift":27},"loc":{"Shift":32},"false":{"Shift":26},"(":{"Shift":23},"unary":{"Shift":42},"factor":{"Shift":36},"num":{"Shift":28},"!":{"Shift":29},"true":{"Shift":22},"term":{"Shift":37}}},{"actions":{"*":{"Reduce":{"left":"factor","right":["false"]}},"==":{"Reduce":{"left":"factor","right":["false"]}},";":{"Reduce":{"left":"factor","right":["false"]}},"<":{"Reduce":{"left":"factor","right":["false"]}},"<=":{"Reduce":{"left":"factor","right":["false"]}},"-":{"Reduce":{"left":"factor","right":["false"]}},"||":{"Reduce":{"left":"factor","right":["false"]}},">=":{"Reduce":{"left":"factor","right":["false"]}},"/":{"Reduce":{"left":"factor","right":["false"]}},")":{"Reduce":{"left":"factor","right":["false"]}},">":{"Reduce":{"left":"factor","right":["false"]}},"+":{"Reduce":{"left":"factor","right":["false"]}},"&&":{"Reduce":{"left":"factor","right":["false"]}},"!=":{"Reduce":{"left":"factor","right":["false"]}}}},{"actions":{"<=":{"Reduce":{"left":"factor","right":["real"]}},"&&":{"Reduce":{"left":"factor","right":["real"]}},")":{"Reduce":{"left":"factor","right":["real"]}},"<":{"Reduce":{"left":"factor","right":["real"]}},">=":{"Reduce":{"left":"factor","right":["real"]}},"*":{"Reduce":{"left":"factor","right":["real"]}},">":{"Reduce":{"left":"factor","right":["real"]}},"+":{"Reduce":{"left":"factor","right":["real"]}},"==":{"Reduce":{"left":"factor","right":["real"]}},"-":{"Reduce":{"left":"factor","right":["real"]}},"!=":{"Reduce":{"left":"factor","right":["real"]}},";":{"Reduce":{"left":"factor","right":["real"]}},"||":{"Reduce":{"left":"factor","right":["real"]}},"/":{"Reduce":{"left":"factor","right":["real"]}}}},{"actions":{"<=":{"Reduce":{"left":"factor","right":["num"]}},"||":{"Reduce":{"left":"factor","right":["num"]}},"+":{"Reduce":{"left":"factor","right":["num"]}},"-":{"Reduce":{"left":"factor","right":["num"]}},"/":{"Reduce":{"left":"factor","right":["num"]}},"==":{"Reduce":{"left":"factor","right":["num"]}},"&&":{"Reduce":{"left":"factor","right":["num"]}},"<":{"Reduce":{"left":"factor","right":["num"]}},">=":{"Reduce":{"left":"factor","right":["num"]}},"*":{"Reduce":{"left":"factor","right":["num"]}},">":{"Reduce":{"left":"factor","right":["num"]}},";":{"Reduce":{"left":"factor","right":["num"]}},")":{"Reduce":{"left":"factor","right":["num"]}},"!=":{"Reduce":{"left":"factor","right":["num"]}}}},{"actions":{"unary":{"Shift":30},"-":{"Shift":21},"false":{"Shift":26},"factor":{"Shift":36},"!":{"Shift":29},"true":{"Shift":22},"(":{"Shift":23},"loc":{"Shift":32},"num":{"Shift":28},"id":{"Shift":31},"real":{"Shift":27}}},{"actions":{"<":{"Reduce":{"left":"unary","right":["!","unary"]}},"<=":{"Reduce":{"left":"unary","right":["!","unary"]}},"||":{"Reduce":{"left":"unary","right":["!","unary"]}},">=":{"Reduce":{"left":"unary","right":["!","unary"]}},"!=":{"Reduce":{"left":"unary","right":["!","unary"]}},"-":{"Reduce":{"left":"unary","right":["!","unary"]}},">":{"Reduce":{"left":"unary","right":["!","unary"]}},")":{"Reduce":{"left":"unary","right":["!","unary"]}},"+":{"Reduce":{"left":"unary","right":["!","unary"]}},"/":{"Reduce":{"left":"unary","right":["!","unary"]}},";":{"Reduce":{"left":"unary","right":["!","unary"]}},"==":{"Reduce":{"left":"unary","right":["!","unary"]}},"*":{"Reduce":{"left":"unary","right":["!","unary"]}},"&&":{"Reduce":{"left":"unary","right":["!","unary"]}}}},{"actions":{"==":{"Reduce":{"left":"loc","right":["id"]}},"/":{"Reduce":{"left":"loc","right":["id"]}},"<=":{"Reduce":{"left":"loc","right":["id"]}},"||":{"Reduce":{"left":"loc","right":["id"]}},";":{"Reduce":{"left":"loc","right":["id"]}},"-":{"Reduce":{"left":"loc","right":["id"]}},"*":{"Reduce":{"left":"loc","right":["id"]}},"!=":{"Reduce":{"left":"loc","right":["id"]}},">":{"Reduce":{"left":"loc","right":["id"]}},"=":{"Reduce":{"left":"loc","right":["id"]}},"&&":{"Reduce":{"left":"loc","right":["id"]}},"+":{"Reduce":{"left":"loc","right":["id"]}},"<":{"Reduce":{"left":"loc","right":["id"]}},")":{"Reduce":{"left":"loc","right":["id"]}},"[":{"Reduce":{"left":"loc","right":["id"]}},">=":{"Reduce":{"left":"loc","right":["id"]}}}},{"actions":{">":{"Reduce":{"left":"factor","right":["loc"]}},"||":{"Reduce":{"left":"factor","right":["loc"]}},")":{"Reduce":{"left":"factor","right":["loc"]}},"<=":{"Reduce":{"left":"factor","right":["loc"]}},"*":{"Reduce":{"left":"factor","right":["loc"]}},"+":{"Reduce":{"left":"factor","right":["loc"]}},"==":{"Reduce":{"left":"factor","right":["loc"]}},"<":{"Reduce":{"left":"factor","right":["loc"]}},"-":{"Reduce":{"left":"factor","right":["loc"]}},"!=":{"Reduce":{"left":"factor","right":["loc"]}},";":{"Reduce":{"left":"factor","right":["loc"]}},"/":{"Reduce":{"left":"factor","right":["loc"]}},"&&":{"Reduce":{"left":"factor","right":["loc"]}},"[":{"Shift":33},">=":{"Reduce":{"left":"factor","right":["loc"]}}}},{"actions":{"num":{"Shift":34}}},{"actions":{"]":{"Shift":35}}},{"actions":{"<":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"!=":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"<=":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"[":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},">=":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"/":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},";":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"+":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},")":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"==":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"-":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"||":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"*":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},">":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"=":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}},"&&":{"Reduce":{"left":"loc","right":["loc","[","num","]"]}}}},{"actions":{"&&":{"Reduce":{"left":"unary","right":["factor"]}},"*":{"Reduce":{"left":"unary","right":["factor"]}},"+":{"Reduce":{"left":"unary","right":["factor"]}},">":{"Reduce":{"left":"unary","right":["factor"]}},">=":{"Reduce":{"left":"unary","right":["factor"]}},"/":{"Reduce":{"left":"unary","right":["factor"]}},";":{"Reduce":{"left":"unary","right":["factor"]}},"||":{"Reduce":{"left":"unary","right":["factor"]}},")":{"Reduce":{"left":"unary","right":["factor"]}},"-":{"Reduce":{"left":"unary","right":["factor"]}},"!=":{"Reduce":{"left":"unary","right":["factor"]}},"<":{"Reduce":{"left":"unary","right":["factor"]}},"<=":{"Reduce":{"left":"unary","right":["factor"]}},"==":{"Reduce":{"left":"unary","right":["factor"]}}}},{"actions":{"!=":{"Reduce":{"left":"expr","right":["expr","-","term"]}},")":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"*":{"Shift":40},">=":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"==":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"||":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"/":{"Shift":38},"&&":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"<=":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"-":{"Reduce":{"left":"expr","right":["expr","-","term"]}},">":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"+":{"Reduce":{"left":"expr","right":["expr","-","term"]}},"<":{"Reduce":{"left":"expr","right":["expr","-","term"]}},";":{"Reduce":{"left":"expr","right":["expr","-","term"]}}}},{"actions":{"true":{"Shift":22},"!":{"Shift":29},"unary":{"Shift":39},"-":{"Shift":21},"loc":{"Shift":32},"id":{"Shift":31},"real":{"Shift":27},"factor":{"Shift":36},"num":{"Shift":28},"(":{"Shift":23},"false":{"Shift":26}}},{"actions":{">":{"Reduce":{"left":"term","right":["term","/","unary"]}},"/":{"Reduce":{"left":"term","right":["term","/","unary"]}},"<=":{"Reduce":{"left":"term","right":["term","/","unary"]}},";":{"Reduce":{"left":"term","right":["term","/","unary"]}},")":{"Reduce":{"left":"term","right":["term","/","unary"]}},"||":{"Reduce":{"left":"term","right":["term","/","unary"]}},"-":{"Reduce":{"left":"term","right":["term","/","unary"]}},"*":{"Reduce":{"left":"term","right":["term","/","unary"]}},"==":{"Reduce":{"left":"term","right":["term","/","unary"]}},">=":{"Reduce":{"left":"term","right":["term","/","unary"]}},"<":{"Reduce":{"left":"term","right":["term","/","unary"]}},"!=":{"Reduce":{"left":"term","right":["term","/","unary"]}},"&&":{"Reduce":{"left":"term","right":["term","/","unary"]}},"+":{"Reduce":{"left":"term","right":["term","/","unary"]}}}},{"actions":{"real":{"Shift":27},"loc":{"Shift":32},"num":{"Shift":28},"false":{"Shift":26},"-":{"Shift":21},"!":{"Shift":29},"factor":{"Shift":36},"unary":{"Shift":41},"(":{"Shift":23},"id":{"Shift":31},"true":{"Shift":22}}},{"actions":{"*":{"Reduce":{"left":"term","right":["term","*","unary"]}},")":{"Reduce":{"left":"term","right":["term","*","unary"]}},";":{"Reduce":{"left":"term","right":["term","*","unary"]}},"==":{"Reduce":{"left":"term","right":["term","*","unary"]}},">=":{"Reduce":{"left":"term","right":["term","*","unary"]}},"/":{"Reduce":{"left":"term","right":["term","*","unary"]}},"!=":{"Reduce":{"left":"term","right":["term","*","unary"]}},"<":{"Reduce":{"left":"term","right":["term","*","unary"]}},"||":{"Reduce":{"left":"term","right":["term","*","unary"]}},"&&":{"Reduce":{"left":"term","right":["term","*","unary"]}},"-":{"Reduce":{"left":"term","right":["term","*","unary"]}},">":{"Reduce":{"left":"term","right":["term","*","unary"]}},"<=":{"Reduce":{"left":"term","right":["term","*","unary"]}},"+":{"Reduce":{"left":"term","right":["term","*","unary"]}}}},{"actions":{"*":{"Reduce":{"left":"term","right":["unary"]}},">=":{"Reduce":{"left":"term","right":["unary"]}},"!=":{"Reduce":{"left":"term","right":["unary"]}},"||":{"Reduce":{"left":"term","right":["unary"]}},"/":{"Reduce":{"left":"term","right":["unary"]}},"&&":{"Reduce":{"left":"term","right":["unary"]}},">":{"Reduce":{"left":"term","right":["unary"]}},"<":{"Reduce":{"left":"term","right":["unary"]}},"-":{"Reduce":{"left":"term","right":["unary"]}},"<=":{"Reduce":{"left":"term","right":["unary"]}},";":{"Reduce":{"left":"term","right":["unary"]}},"+":{"Reduce":{"left":"term","right":["unary"]}},")":{"Reduce":{"left":"term","right":["unary"]}},"==":{"Reduce":{"left":"term","right":["unary"]}}}},{"actions":{"unary":{"Shift":42},"id":{"Shift":31},"expr":{"Shift":44},"loc":{"Shift":32},"term":{"Shift":47},"-":{"Shift":21},"(":{"Shift":23},"!":{"Shift":29},"false":{"Shift":26},"real":{"Shift":27},"true":{"Shift":22},"num":{"Shift":28},"factor":{"Shift":36}}},{"actions":{"+":{"Shift":45},";":{"Reduce":{"left":"rel","right":["expr","<","expr"]}},"&&":{"Reduce":{"left":"rel","right":["expr","<","expr"]}},"-":{"Shift":25},"==":{"Reduce":{"left":"rel","right":["expr","<","expr"]}},")":{"Reduce":{"left":"rel","right":["expr","<","expr"]}},"!=":{"Reduce":{"left":"rel","right":["expr","<","expr"]}},"||":{"Reduce":{"left":"rel","right":["expr","<","expr"]}}}},{"actions":{"!":{"Shift":29},"real":{"Shift":27},"unary":{"Shift":42},"loc":{"Shift":32},"id":{"Shift":31},"num":{"Shift":28},"true":{"Shift":22},"(":{"Shift":23},"factor":{"Shift":36},"term":{"Shift":46},"false":{"Shift":26},"-":{"Shift":21}}},{"actions":{"==":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"-":{"Reduce":{"left":"expr","right":["expr","+","term"]}},";":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"&&":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"+":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"/":{"Shift":38},"<":{"Reduce":{"left":"expr","right":["expr","+","term"]}},">=":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"!=":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"*":{"Shift":40},">":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"||":{"Reduce":{"left":"expr","right":["expr","+","term"]}},"<=":{"Reduce":{"left":"expr","right":["expr","+","term"]}},")":{"Reduce":{"left":"expr","right":["expr","+","term"]}}}},{"actions":{";":{"Reduce":{"left":"expr","right":["term"]}},"<":{"Reduce":{"left":"expr","right":["term"]}},"&&":{"Reduce":{"left":"expr","right":["term"]}},")":{"Reduce":{"left":"expr","right":["term"]}},"/":{"Shift":38},"||":{"Reduce":{"left":"expr","right":["term"]}},"-":{"Reduce":{"left":"expr","right":["term"]}},"<=":{"Reduce":{"left":"expr","right":["term"]}},"==":{"Reduce":{"left":"expr","right":["term"]}},"+":{"Reduce":{"left":"expr","right":["term"]}},"!=":{"Reduce":{"left":"expr","right":["term"]}},">":{"Reduce":{"left":"expr","right":["term"]}},">=":{"Reduce":{"left":"expr","right":["term"]}},"*":{"Shift":40}}},{"actions":{"loc":{"Shift":32},"expr":{"Shift":49},"(":{"Shift":23},"num":{"Shift":28},"true":{"Shift":22},"!":{"Shift":29},"false":{"Shift":26},"unary":{"Shift":42},"id":{"Shift":31},"factor":{"Shift":36},"term":{"Shift":47},"-":{"Shift":21},"real":{"Shift":27}}},{"actions":{"+":{"Shift":45},")":{"Reduce":{"left":"rel","right":["expr",">","expr"]}},"==":{"Reduce":{"left":"rel","right":["expr",">","expr"]}},";":{"Reduce":{"left":"rel","right":["expr",">","expr"]}},"&&":{"Reduce":{"left":"rel","right":["expr",">","expr"]}},"!=":{"Reduce":{"left":"rel","right":["expr",">","expr"]}},"-":{"Shift":25},"||":{"Reduce":{"left":"rel","right":["expr",">","expr"]}}}},{"actions":{"factor":{"Shift":36},"(":{"Shift":23},"-":{"Shift":21},"false":{"Shift":26},"term":{"Shift":47},"unary":{"Shift":42},"id":{"Shift":31},"true":{"Shift":22},"real":{"Shift":27},"num":{"Shift":28},"!":{"Shift":29},"loc":{"Shift":32},"expr":{"Shift":51}}},{"actions":{"&&":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}},"||":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}},"+":{"Shift":45},"==":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}},"!=":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}},";":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}},"-":{"Shift":25},")":{"Reduce":{"left":"rel","right":["expr","<=","expr"]}}}},{"actions":{"!":{"Shift":29},"expr":{"Shift":53},"-":{"Shift":21},"(":{"Shift":23},"id":{"Shift":31},"unary":{"Shift":42},"num":{"Shift":28},"factor":{"Shift":36},"real":{"Shift":27},"false":{"Shift":26},"true":{"Shift":22},"loc":{"Shift":32},"term":{"Shift":47}}},{"actions":{";":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}},"!=":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}},"+":{"Shift":45},"-":{"Shift":25},"==":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}},"&&":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}},")":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}},"||":{"Reduce":{"left":"rel","right":["expr",">=","expr"]}}}},{"actions":{"||":{"Shift":20},")":{"Shift":55}}},{"actions":{"||":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"&&":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"+":{"Reduce":{"left":"factor","right":["(","bool",")"]}},">=":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"!=":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"/":{"Reduce":{"left":"factor","right":["(","bool",")"]}},">":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"<":{"Reduce":{"left":"factor","right":["(","bool",")"]}},";":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"-":{"Reduce":{"left":"factor","right":["(","bool",")"]}},")":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"<=":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"*":{"Reduce":{"left":"factor","right":["(","bool",")"]}},"==":{"Reduce":{"left":"factor","right":["(","bool",")"]}}}},{"actions":{";":{"Reduce":{"left":"bool","right":["join"]}},"||":{"Reduce":{"left":"bool","right":["join"]}},")":{"Reduce":{"left":"bool","right":["join"]}},"&&":{"Shift":57}}},{"actions":{"(":{"Shift":23},"expr":{"Shift":24},"equality":{"Shift":58},"unary":{"Shift":42},"num":{"Shift":28},"!":{"Shift":29},"false":{"Shift":26},"term":{"Shift":47},"true":{"Shift":22},"real":{"Shift":27},"id":{"Shift":31},"-":{"Shift":21},"factor":{"Shift":36},"loc":{"Shift":32},"rel":{"Shift":63}}},{"actions":{"==":{"Shift":61},"||":{"Reduce":{"left":"join","right":["join","&&","equality"]}},")":{"Reduce":{"left":"join","right":["join","&&","equality"]}},"&&":{"Reduce":{"left":"join","right":["join","&&","equality"]}},";":{"Reduce":{"left":"join","right":["join","&&","equality"]}},"!=":{"Shift":59}}},{"actions":{"term":{"Shift":47},"id":{"Shift":31},"unary":{"Shift":42},"num":{"Shift":28},"real":{"Shift":27},"expr":{"Shift":24},"(":{"Shift":23},"true":{"Shift":22},"rel":{"Shift":60},"false":{"Shift":26},"factor":{"Shift":36},"-":{"Shift":21},"loc":{"Shift":32},"!":{"Shift":29}}},{"actions":{"!=":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}},";":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}},"&&":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}},"||":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}},"==":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}},")":{"Reduce":{"left":"equality","right":["equality","!=","rel"]}}}},{"actions":{"false":{"Shift":26},"num":{"Shift":28},"true":{"Shift":22},"factor":{"Shift":36},"unary":{"Shift":42},"expr":{"Shift":24},"(":{"Shift":23},"real":{"Shift":27},"id":{"Shift":31},"-":{"Shift":21},"term":{"Shift":47},"rel":{"Shift":62},"loc":{"Shift":32},"!":{"Shift":29}}},{"actions":{"||":{"Reduce":{"left":"equality","right":["equality","==","rel"]}},"==":{"Reduce":{"left":"equality","right":["equality","==","rel"]}},")":{"Reduce":{"left":"equality","right":["equality","==","rel"]}},"!=":{"Reduce":{"left":"equality","right":["equality","==","rel"]}},";":{"Reduce":{"left":"equality","right":["equality","==","rel"]}},"&&":{"Reduce":{"left":"equality","right":["equality","==","rel"]}}}},{"actions":{";":{"Reduce":{"left":"equality","right":["rel"]}},"!=":{"Reduce":{"left":"equality","right":["rel"]}},"||":{"Reduce":{"left":"equality","right":["rel"]}},"==":{"Reduce":{"left":"equality","right":["rel"]}},")":{"Reduce":{"left":"equality","right":["rel"]}},"&&":{"Reduce":{"left":"equality","right":["rel"]}}}},{"actions":{"==":{"Shift":61},"||":{"Reduce":{"left":"join","right":["equality"]}},";":{"Reduce":{"left":"join","right":["equality"]}},")":{"Reduce":{"left":"join","right":["equality"]}},"&&":{"Reduce":{"left":"join","right":["equality"]}},"!=":{"Shift":59}}},{"actions":{"+":{"Reduce":{"left":"unary","right":["-","unary"]}},";":{"Reduce":{"left":"unary","right":["-","unary"]}},"<":{"Reduce":{"left":"unary","right":["-","unary"]}},"-":{"Reduce":{"left":"unary","right":["-","unary"]}},">":{"Reduce":{"left":"unary","right":["-","unary"]}},"<=":{"Reduce":{"left":"unary","right":["-","unary"]}},"/":{"Reduce":{"left":"unary","right":["-","unary"]}},">=":{"Reduce":{"left":"unary","right":["-","unary"]}},")":{"Reduce":{"left":"unary","right":["-","unary"]}},"&&":{"Reduce":{"left":"unary","right":["-","unary"]}},"||":{"Reduce":{"left":"unary","right":["-","unary"]}},"*":{"Reduce":{"left":"unary","right":["-","unary"]}},"==":{"Reduce":{"left":"unary","right":["-","unary"]}},"!=":{"Reduce":{"left":"unary","right":["-","unary"]}}}},{"actions":{"&&":{"Shift":57},")":{"Reduce":{"left":"bool","right":["bool","||","join"]}},";":{"Reduce":{"left":"bool","right":["bool","||","join"]}},"||":{"Reduce":{"left":"bool","right":["bool","||","join"]}}}},{"actions":{"block":{"Shift":68},"stmt":{"Shift":69},"if":{"Shift":17},"do":{"Shift":72},"id":{"Shift":31},"break":{"Shift":15},"while":{"Shift":79},"loc":{"Shift":84},"left_curly_brace":{"Shift":4}}},{"actions":{"else":{"Reduce":{"left":"stmt","right":["block"]}},"break":{"Reduce":{"left":"stmt","right":["block"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["block"]}},"right_curly_brace":{"Reduce":{"left":"stmt","right":["block"]}},"do":{"Reduce":{"left":"stmt","right":["block"]}},"if":{"Reduce":{"left":"stmt","right":["block"]}},"while":{"Reduce":{"left":"stmt","right":["block"]}},"id":{"Reduce":{"left":"stmt","right":["block"]}}}},{"actions":{"id":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"break":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"if":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"right_curly_brace":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"do":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"else":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}},"while":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt"]}}}},{"actions":{"block":{"Shift":68},"stmt":{"Shift":71},"loc":{"Shift":84},"id":{"Shift":31},"do":{"Shift":72},"break":{"Shift":15},"if":{"Shift":17},"left_curly_brace":{"Shift":4},"while":{"Shift":79}}},{"actions":{"right_curly_brace":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"else":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"break":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"if":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"id":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"while":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}},"do":{"Reduce":{"left":"stmt","right":["if","(","bool",")","stmt","else","stmt"]}}}},{"actions":{"stmt":{"Shift":73},"break":{"Shift":15},"do":{"Shift":72},"left_curly_brace":{"Shift":4},"block":{"Shift":68},"loc":{"Shift":84},"id":{"Shift":31},"while":{"Shift":79},"if":{"Shift":17}}},{"actions":{"while":{"Shift":74}}},{"actions":{"(":{"Shift":75}}},{"actions":{"join":{"Shift":56},"rel":{"Shift":63},"num":{"Shift":28},"!":{"Shift":29},"true":{"Shift":22},"real":{"Shift":27},"unary":{"Shift":42},"loc":{"Shift":32},"term":{"Shift":47},"bool":{"Shift":76},"-":{"Shift":21},"false":{"Shift":26},"factor":{"Shift":36},"id":{"Shift":31},"(":{"Shift":23},"equality":{"Shift":64},"expr":{"Shift":24}}},{"actions":{")":{"Shift":77},"||":{"Shift":20}}},{"actions":{";":{"Shift":78}}},{"actions":{"break":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"if":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"else":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"id":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"do":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"while":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"right_curly_brace":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["do","stmt","while","(","bool",")",";"]}}}},{"actions":{"(":{"Shift":80}}},{"actions":{"loc":{"Shift":32},"rel":{"Shift":63},"real":{"Shift":27},"unary":{"Shift":42},"num":{"Shift":28},"join":{"Shift":56},"equality":{"Shift":64},"expr":{"Shift":24},"true":{"Shift":22},"!":{"Shift":29},"-":{"Shift":21},"factor":{"Shift":36},"id":{"Shift":31},"term":{"Shift":47},"false":{"Shift":26},"bool":{"Shift":81},"(":{"Shift":23}}},{"actions":{")":{"Shift":82},"||":{"Shift":20}}},{"actions":{"left_curly_brace":{"Shift":4},"block":{"Shift":68},"break":{"Shift":15},"if":{"Shift":17},"stmt":{"Shift":83},"loc":{"Shift":84},"id":{"Shift":31},"do":{"Shift":72},"while":{"Shift":79}}},{"actions":{"right_curly_brace":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"if":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"do":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"else":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"while":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"break":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}},"id":{"Reduce":{"left":"stmt","right":["while","(","bool",")","stmt"]}}}},{"actions":{"=":{"Shift":85},"[":{"Shift":33}}},{"actions":{"unary":{"Shift":42},"false":{"Shift":26},"bool":{"Shift":86},"id":{"Shift":31},"num":{"Shift":28},"term":{"Shift":47},"(":{"Shift":23},"factor":{"Shift":36},"equality":{"Shift":64},"loc":{"Shift":32},"expr":{"Shift":24},"rel":{"Shift":63},"join":{"Shift":56},"real":{"Shift":27},"-":{"Shift":21},"!":{"Shift":29},"true":{"Shift":22}}},{"actions":{";":{"Shift":87},"||":{"Shift":20}}},{"actions":{"break":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"else":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"while":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"id":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"if":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"left_curly_brace":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"right_curly_brace":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}},"do":{"Reduce":{"left":"stmt","right":["loc","=","bool",";"]}}}},{"actions":{"do":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"break":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"if":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"id":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"while":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"right_curly_brace":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}},"left_curly_brace":{"Reduce":{"left":"stmts","right":["stmts","stmt"]}}}},{"actions":{"else":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"while":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"right_curly_brace":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"left_curly_brace":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"id":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"__$__":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"break":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"if":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}},"do":{"Reduce":{"left":"block","right":["left_curly_brace","decls","stmts","right_curly_brace"]}}}}]}"#).unwrap();
        // ======================

        let mut handlers: HashMap<ReduceDerivation, Box<dyn Fn(Vec<String>) -> String>> =
            HashMap::new();

        // handlers generated by rparser
        // ======================
        handlers.insert(
            ReduceDerivation::build("S".into(), vec!["program".into()]),
            Box::new(|datas| {
                println!("S -> program");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("program".into(), vec!["block".into()]),
            Box::new(|datas| {
                println!("program -> block");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "block".into(),
                vec![
                    "left_curly_brace".into(),
                    "decls".into(),
                    "stmts".into(),
                    "right_curly_brace".into(),
                ],
            ),
            Box::new(|datas| {
                println!("block -> left_curly_brace decls stmts right_curly_brace");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("decls".into(), vec!["decls".into(), "decl".into()]),
            Box::new(|datas| {
                println!("decls -> decls decl");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("decls".into(), vec!["__EPSILON__".into()]),
            Box::new(|datas| {
                println!("decls -> ε");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("decl".into(), vec!["type".into(), "id".into(), ";".into()]),
            Box::new(|datas| {
                println!("decl -> type id ;");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "type".into(),
                vec!["type".into(), "[".into(), "num".into(), "]".into()],
            ),
            Box::new(|datas| {
                println!("type -> type [ num ]");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("type".into(), vec!["basic".into()]),
            Box::new(|datas| {
                println!("type -> basic");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("stmts".into(), vec!["stmts".into(), "stmt".into()]),
            Box::new(|datas| {
                println!("stmts -> stmts stmt");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("stmts".into(), vec!["__EPSILON__".into()]),
            Box::new(|datas| {
                println!("stmts -> ε");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "stmt".into(),
                vec!["loc".into(), "=".into(), "bool".into(), ";".into()],
            ),
            Box::new(|datas| {
                println!("stmt -> loc = bool ;");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "stmt".into(),
                vec![
                    "if".into(),
                    "(".into(),
                    "bool".into(),
                    ")".into(),
                    "stmt".into(),
                ],
            ),
            Box::new(|datas| {
                println!("stmt -> if ( bool ) stmt");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "stmt".into(),
                vec![
                    "if".into(),
                    "(".into(),
                    "bool".into(),
                    ")".into(),
                    "stmt".into(),
                    "else".into(),
                    "stmt".into(),
                ],
            ),
            Box::new(|datas| {
                println!("stmt -> if ( bool ) stmt else stmt");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "stmt".into(),
                vec![
                    "while".into(),
                    "(".into(),
                    "bool".into(),
                    ")".into(),
                    "stmt".into(),
                ],
            ),
            Box::new(|datas| {
                println!("stmt -> while ( bool ) stmt");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "stmt".into(),
                vec![
                    "do".into(),
                    "stmt".into(),
                    "while".into(),
                    "(".into(),
                    "bool".into(),
                    ")".into(),
                    ";".into(),
                ],
            ),
            Box::new(|datas| {
                println!("stmt -> do stmt while ( bool ) ;");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("stmt".into(), vec!["break".into(), ";".into()]),
            Box::new(|datas| {
                println!("stmt -> break ;");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("stmt".into(), vec!["block".into()]),
            Box::new(|datas| {
                println!("stmt -> block");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "loc".into(),
                vec!["loc".into(), "[".into(), "num".into(), "]".into()],
            ),
            Box::new(|datas| {
                println!("loc -> loc [ num ]");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("loc".into(), vec!["id".into()]),
            Box::new(|datas| {
                println!("loc -> id");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "bool".into(),
                vec!["bool".into(), "||".into(), "join".into()],
            ),
            Box::new(|datas| {
                println!("bool -> bool || join");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("bool".into(), vec!["join".into()]),
            Box::new(|datas| {
                println!("bool -> join");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "join".into(),
                vec!["join".into(), "&&".into(), "equality".into()],
            ),
            Box::new(|datas| {
                println!("join -> join && equality");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("join".into(), vec!["equality".into()]),
            Box::new(|datas| {
                println!("join -> equality");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "equality".into(),
                vec!["equality".into(), "==".into(), "rel".into()],
            ),
            Box::new(|datas| {
                println!("equality -> equality == rel");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "equality".into(),
                vec!["equality".into(), "!=".into(), "rel".into()],
            ),
            Box::new(|datas| {
                println!("equality -> equality != rel");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("equality".into(), vec!["rel".into()]),
            Box::new(|datas| {
                println!("equality -> rel");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("rel".into(), vec!["expr".into(), "<".into(), "expr".into()]),
            Box::new(|datas| {
                println!("rel -> expr < expr");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "rel".into(),
                vec!["expr".into(), "<=".into(), "expr".into()],
            ),
            Box::new(|datas| {
                println!("rel -> expr <= expr");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "rel".into(),
                vec!["expr".into(), ">=".into(), "expr".into()],
            ),
            Box::new(|datas| {
                println!("rel -> expr >= expr");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("rel".into(), vec!["expr".into(), ">".into(), "expr".into()]),
            Box::new(|datas| {
                println!("rel -> expr > expr");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("rel".into(), vec!["expr".into()]),
            Box::new(|datas| {
                println!("rel -> expr");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "expr".into(),
                vec!["expr".into(), "+".into(), "term".into()],
            ),
            Box::new(|datas| {
                println!("expr -> expr + term");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "expr".into(),
                vec!["expr".into(), "-".into(), "term".into()],
            ),
            Box::new(|datas| {
                println!("expr -> expr - term");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("expr".into(), vec!["term".into()]),
            Box::new(|datas| {
                println!("expr -> term");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "term".into(),
                vec!["term".into(), "*".into(), "unary".into()],
            ),
            Box::new(|datas| {
                println!("term -> term * unary");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build(
                "term".into(),
                vec!["term".into(), "/".into(), "unary".into()],
            ),
            Box::new(|datas| {
                println!("term -> term / unary");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("term".into(), vec!["unary".into()]),
            Box::new(|datas| {
                println!("term -> unary");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("unary".into(), vec!["!".into(), "unary".into()]),
            Box::new(|datas| {
                println!("unary -> ! unary");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("unary".into(), vec!["-".into(), "unary".into()]),
            Box::new(|datas| {
                println!("unary -> - unary");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("unary".into(), vec!["factor".into()]),
            Box::new(|datas| {
                println!("unary -> factor");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["(".into(), "bool".into(), ")".into()]),
            Box::new(|datas| {
                println!("factor -> ( bool )");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["loc".into()]),
            Box::new(|datas| {
                println!("factor -> loc");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["num".into()]),
            Box::new(|datas| {
                println!("factor -> num");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["real".into()]),
            Box::new(|datas| {
                println!("factor -> real");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["true".into()]),
            Box::new(|datas| {
                println!("factor -> true");
                "".to_string()
            }),
        );
        handlers.insert(
            ReduceDerivation::build("factor".into(), vec!["false".into()]),
            Box::new(|datas| {
                println!("factor -> false");
                "".to_string()
            }),
        );
        // ======================

        handlers.insert(
            ReduceDerivation::build(Self::DUMMY_START_SYMBOL.into(), vec!["S".into()]),
            Box::new(|vals| vals[0].clone()),
        );

        let mut res: RParser = RParser::default();
        res.action_table = action_table;
        res.handlers = handlers;
        res
    }

    // do shift-reduce parsing
    pub fn parse<T>(&self, tokens: Vec<T>) -> Result<ParsingTreeNode, Box<dyn Error>>
    where
        T: Token,
    {
        let mut shift_index = 0;
        let mut stack: Vec<NodePair> = Vec::new();

        stack.push(NodePair::new(
            ParsingTreeNode::build(Self::DUMMY_START_SYMBOL.into(), String::new(), Vec::new()),
            0,
        ));

        loop {
            let token_node = &tokens[shift_index].to_tree_node();

            let action = self
                .action_table
                .get_action(stack.last().unwrap().1, &token_node.symbol_type);

            match action {
                Some(Action::Shift(next_state)) => {
                    // shift
                    stack.push(NodePair::new(
                        tokens[shift_index].to_tree_node(),
                        *next_state,
                    ));
                    shift_index += 1;
                }
                Some(Action::Reduce(derivation)) => {
                    // pop right hand
                    let mut children: Vec<ParsingTreeNode> = Vec::new();
                    let mut datas = Vec::new();
                    for _ in 0..derivation.right.len() {
                        if let Some(top) = stack.pop() {
                            datas.push(top.0.data.clone());
                            children.push(top.0);
                        } else {
                            Err("parsing error: stack is empty.")?;
                        }
                    }

                    let children: Vec<_> = children.into_iter().rev().collect();
                    let datas: Vec<_> = datas.into_iter().rev().collect();
                    let handler = self.handlers.get(&derivation).unwrap();

                    // if the left hand side is dummy start symbol
                    // do nothing
                    if derivation.left == Self::DUMMY_START_SYMBOL {
                        stack.push(NodePair(
                            ParsingTreeNode::build(
                                derivation.left.to_string(),
                                handler(datas),
                                children,
                            ),
                            0,
                        ));
                        continue;
                    }

                    // goto[top_state(stack), X]
                    if let Action::Shift(next_state) = self
                        .action_table
                        .get_action(stack.last().unwrap().1, &derivation.left)
                        .unwrap()
                    {
                        stack.push(NodePair(
                            ParsingTreeNode::build(
                                derivation.left.to_string(),
                                handler(datas),
                                children,
                            ),
                            *next_state,
                        ));
                    } else {
                        Err("parsing error: invalid Shift action.")?;
                    }
                }
                Some(Action::Accept) => {
                    let res = stack.pop().unwrap().0;
                    return Ok(res);
                }
                _ => {
                    Err("parsing error: unknown.")?;
                }
            }
        }
    }
}
